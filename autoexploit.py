import argparse
from pymetasploit3.msfrpc import MsfRpcClient

def connect_msf():
    try:
        # Metasploit'e bağlanma
        client = MsfRpcClient(None, ssl=True)
        print("Metasploit'e başarıyla bağlanıldı.")
        return client
    except Exception as e:
        print(f"Metasploit'e bağlanırken hata oluştu: {e}")
        exit(1)

def get_target_info(client, target_ip, target_port):
    # Hedef IP ve port hakkında bilgi alma
    target_info = {}
    try:
        services = client.services.get(target_ip)
        for service in services:
            if service['port'] == target_port:
                target_info['name'] = service['name']
                target_info['version'] = service['version']
                target_info['platform'] = service['platform']
                break
    except Exception as e:
        print(f"Hedef bilgilerini alırken hata oluştu: {e}")
    return target_info

def get_exploits(client, target_info):
    # Hedef bilgilerine göre uygun exploitleri al
    exploits = []
    for exploit in client.exploits:
        if target_info['platform'] in exploit['platform'] or exploit['name'] in target_info['name']:
            exploits.append(exploit['name'])
    return exploits

def get_payloads(client, exploit_name):
    # Seçilen exploit için uygun payloadları al
    payloads = client.payloads.get(exploit_name, [])
    return [payload['name'] for payload in payloads]

def recommend_exploit_and_payload(client, target_ip, target_port):
    target_info = get_target_info(client, target_ip, target_port)
    if target_info:
        print(f"Hedef Bilgisi: {target_info}")
        exploits = get_exploits(client, target_info)
        if exploits:
            print(f"{len(exploits)} adet uygun exploit bulundu.")
            for i, exploit in enumerate(exploits, start=1):
                print(f"{i}: {exploit}")
            selected_exploit = exploits[0]  # Örnek olarak ilkini seçiyoruz
            payloads = get_payloads(client, selected_exploit)
            if payloads:
                print(f"Seçilen exploit: {selected_exploit}")
                selected_payload = payloads[0]  # İlk payload
                return selected_exploit, selected_payload
    return None, None

def main():
    # Argümanları tanımlama
    parser = argparse.ArgumentParser(description="AutoExploit aracı")
    parser.add_argument('--rhost', required=True, help='Hedef IP adresi')
    parser.add_argument('--rport', required=True, type=int, help='Hedef port numarası')
    args = parser.parse_args()

    # Metasploit'e bağlan
    client = connect_msf()

    # Exploit ve payload önerisi
    exploit, payload = recommend_exploit_and_payload(client, args.rhost, args.rport)
    if exploit and payload:
        print(f"Kullanabileceğiniz exploit: {exploit}")
        print(f"Kullanabileceğiniz payload: {payload}")
    else:
        print("Uygun bir exploit veya payload bulunamadı.")

if __name__ == "__main__":
    main()
